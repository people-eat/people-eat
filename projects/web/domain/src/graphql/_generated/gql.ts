/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "fragment AllergyOption on Allergy {\n  allergyId\n  title\n}": types.AllergyOptionFragmentDoc,
    "fragment CategoryOption on Category {\n  categoryId\n  title\n}": types.CategoryOptionFragmentDoc,
    "fragment KitchenOption on Kitchen {\n  kitchenId\n  title\n}": types.KitchenOptionFragmentDoc,
    "fragment LanguageOption on Language {\n  languageId\n  title\n}": types.LanguageOptionFragmentDoc,
    "fragment SignedInUser on User {\n  userId\n  firstName\n  profilePictureUrl\n  isCook\n  isAdmin\n}": types.SignedInUserFragmentDoc,
    "mutation AssignOneSessionByEmailAddress($request: CreateOneSessionByEmailAddressRequest!) {\n  sessions {\n    success: assignOneByEmailAddress(request: $request)\n  }\n}": types.AssignOneSessionByEmailAddressDocument,
    "mutation CreateOneCook($cookId: String!, $request: CreateOneCookRequest!) {\n  cooks {\n    success: createOne(cookId: $cookId, request: $request)\n  }\n}": types.CreateOneCookDocument,
    "mutation CreateOneUserByEmailAddress($request: CreateOneUserByEmailAddressRequest!, $profilePicture: Upload) {\n  users {\n    success: createOneByEmailAddress(\n      request: $request\n      profilePicture: $profilePicture\n    )\n  }\n}": types.CreateOneUserByEmailAddressDocument,
    "mutation ExpireCurrentSession($userId: String!) {\n  users {\n    sessions(userId: $userId) {\n      success: expireCurrent\n    }\n  }\n}": types.ExpireCurrentSessionDocument,
    "mutation CreateOneUserBookingRequest($request: CreateBookingRequestRequest!, $userId: String!) {\n  users {\n    bookingRequests(userId: $userId) {\n      createOne(request: $request) {\n        success\n        clientSecret\n        bookingRequestId\n      }\n    }\n  }\n}": types.CreateOneUserBookingRequestDocument,
    "mutation CreateOneUserGlobalBookingRequest($userId: String!, $request: CreateOneGlobalBookingRequestRequest!) {\n  users {\n    globalBookingRequests(userId: $userId) {\n      success: createOne(request: $request)\n    }\n  }\n}": types.CreateOneUserGlobalBookingRequestDocument,
    "mutation UpdateCookBiography($cookId: String!, $biography: String!) {\n  cooks {\n    success: updateBiography(cookId: $cookId, biography: $biography)\n  }\n}": types.UpdateCookBiographyDocument,
    "mutation UpdateCookIsVisible($cookId: String!, $isVisible: Boolean!) {\n  cooks {\n    success: updateIsVisible(cookId: $cookId, isVisible: $isVisible)\n  }\n}": types.UpdateCookIsVisibleDocument,
    "mutation UpdateCookLocation($cookId: String!, $location: LocationInput!) {\n  cooks {\n    success: updateLocation(cookId: $cookId, location: $location)\n  }\n}": types.UpdateCookLocationDocument,
    "mutation UpdateCookMaximumParticipants($cookId: String!, $maximumParticipants: UnsignedInt) {\n  cooks {\n    success: updateMaximumParticipants(\n      cookId: $cookId\n      maximumParticipants: $maximumParticipants\n    )\n  }\n}": types.UpdateCookMaximumParticipantsDocument,
    "mutation UpdateCookMaximumPrice($cookId: String!) {\n  cooks {\n    success: updateMaximumPrice(cookId: $cookId)\n  }\n}": types.UpdateCookMaximumPriceDocument,
    "mutation UpdateCookMaximumTravelDistance($cookId: String!, $maximumTravelDistance: UnsignedInt) {\n  cooks {\n    success: updateMaximumTravelDistance(\n      cookId: $cookId\n      maximumTravelDistance: $maximumTravelDistance\n    )\n  }\n}": types.UpdateCookMaximumTravelDistanceDocument,
    "mutation UpdateCookMinimumParticipants($cookId: String!) {\n  cooks {\n    success: updateMinimumParticipants(cookId: $cookId)\n  }\n}": types.UpdateCookMinimumParticipantsDocument,
    "mutation UpdateCookMinimumPrice($cookId: String!) {\n  cooks {\n    success: updateMinimumPrice(cookId: $cookId)\n  }\n}": types.UpdateCookMinimumPriceDocument,
    "mutation UpdateCookRank($cookId: String!, $rank: CookRank!) {\n  cooks {\n    success: updateRank(cookId: $cookId, rank: $rank)\n  }\n}": types.UpdateCookRankDocument,
    "mutation UpdateCookTravelExpenses($cookId: String!, $travelExpenses: UnsignedInt!) {\n  cooks {\n    success: updateTravelExpenses(cookId: $cookId, travelExpenses: $travelExpenses)\n  }\n}": types.UpdateCookTravelExpensesDocument,
    "mutation CreateOneUserAddress($address: CreateOneAddressRequest!, $userId: String!) {\n  users {\n    addresses(userId: $userId) {\n      success: createOne(address: $address)\n    }\n  }\n}": types.CreateOneUserAddressDocument,
    "mutation DeleteOneUserAddress($addressId: String!, $userId: String!) {\n  users {\n    addresses(userId: $userId) {\n      success: deleteOne(addressId: $addressId)\n    }\n  }\n}": types.DeleteOneUserAddressDocument,
    "mutation AddOneCookLanguage($cookId: String!, $languageId: String!) {\n  cooks {\n    success: addOneLanguage(cookId: $cookId, languageId: $languageId)\n  }\n}": types.AddOneCookLanguageDocument,
    "mutation RemoveOneCookLanguage($cookId: String!, $languageId: String!) {\n  cooks {\n    success: removeOneLanguage(cookId: $cookId, languageId: $languageId)\n  }\n}": types.RemoveOneCookLanguageDocument,
    "mutation ConfirmOneEmailAddressUpdate($secret: String!) {\n  users {\n    emailAddressUpdate(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}": types.ConfirmOneEmailAddressUpdateDocument,
    "mutation CreateOneEmailAddressUpdate($emailAddress: EmailAddress!, $userId: String!) {\n  users {\n    emailAddressUpdate(userId: $userId) {\n      success: createOne(emailAddress: $emailAddress)\n    }\n  }\n}": types.CreateOneEmailAddressUpdateDocument,
    "mutation CreateMeal($meal: CreateOneMealRequest!, $cookId: String!, $image: Upload) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: createOne(meal: $meal, image: $image)\n    }\n  }\n}": types.CreateMealDocument,
    "mutation DeleteOneCookMeal($mealId: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: deleteOne(mealId: $mealId)\n    }\n  }\n}": types.DeleteOneCookMealDocument,
    "mutation UpdateCookMealDescription($mealId: String!, $description: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateDescription(mealId: $mealId, description: $description)\n    }\n  }\n}": types.UpdateCookMealDescriptionDocument,
    "mutation UpdateCookMealImage($mealId: String!, $cookId: String!, $image: Upload) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateImage(mealId: $mealId, image: $image)\n    }\n  }\n}": types.UpdateCookMealImageDocument,
    "mutation UpdateCookMealTitle($mealId: String!, $title: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateTitle(mealId: $mealId, title: $title)\n    }\n  }\n}": types.UpdateCookMealTitleDocument,
    "mutation UpdateCookMealType($mealId: String!, $type: MealType!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateType(mealId: $mealId, type: $type)\n    }\n  }\n}": types.UpdateCookMealTypeDocument,
    "mutation CreateManyCookMenuCourseMealOptions($menuId: String!, $cookId: String!, $mealOptions: [CreateOneMealOptionRequest!]!, $courseId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        mealOptions(courseId: $courseId) {\n          success: createMany(mealOptions: $mealOptions)\n        }\n      }\n    }\n  }\n}": types.CreateManyCookMenuCourseMealOptionsDocument,
    "mutation CreateOneCookMenu($menu: CreateOneMenuRequest!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: createOne(menu: $menu)\n    }\n  }\n}": types.CreateOneCookMenuDocument,
    "mutation CreateOneCookMenuCourse($request: CreateOneCourseRequest!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        success: createOne(request: $request)\n      }\n    }\n  }\n}": types.CreateOneCookMenuCourseDocument,
    "mutation DeleteOneCookMenu($menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: deleteOne(menuId: $menuId)\n    }\n  }\n}": types.DeleteOneCookMenuDocument,
    "mutation DeleteOneCookMenuCourse($courseId: String!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        success: deleteOne(courseId: $courseId)\n      }\n    }\n  }\n}": types.DeleteOneCookMenuCourseDocument,
    "mutation DeleteOneCookMenuCourseMealOption($mealId: String!, $courseId: String!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        mealOptions(courseId: $courseId) {\n          deleteOne(mealId: $mealId)\n        }\n      }\n    }\n  }\n}": types.DeleteOneCookMenuCourseMealOptionDocument,
    "mutation UpdateCookMenuBasePrice($menuId: String!, $basePrice: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateBasePrice(menuId: $menuId, basePrice: $basePrice)\n    }\n  }\n}": types.UpdateCookMenuBasePriceDocument,
    "mutation UpdateCookMenuBasePriceCustomers($menuId: String!, $basePriceCustomers: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateBasePriceCustomers(\n        menuId: $menuId\n        basePriceCustomers: $basePriceCustomers\n      )\n    }\n  }\n}": types.UpdateCookMenuBasePriceCustomersDocument,
    "mutation UpdateCookMenuCurrencyCode($menuId: String!, $currencyCode: CurrencyCode!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateCurrencyCode(menuId: $menuId, currencyCode: $currencyCode)\n    }\n  }\n}": types.UpdateCookMenuCurrencyCodeDocument,
    "mutation UpdateCookMenuDescription($menuId: String!, $description: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateDescription(menuId: $menuId, description: $description)\n    }\n  }\n}": types.UpdateCookMenuDescriptionDocument,
    "mutation UpdateCookMenuGreetingFromKitchen($menuId: String!, $cookId: String!, $greetingFromKitchen: String) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateGreetingFromKitchen(\n        menuId: $menuId\n        greetingFromKitchen: $greetingFromKitchen\n      )\n    }\n  }\n}": types.UpdateCookMenuGreetingFromKitchenDocument,
    "mutation UpdateCookMenuIsVisible($menuId: String!, $isVisible: Boolean!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateIsVisible(menuId: $menuId, isVisible: $isVisible)\n    }\n  }\n}": types.UpdateCookMenuIsVisibleDocument,
    "mutation UpdateCookMenuKitchenId($menuId: String!, $cookId: String!, $kitchenId: String) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateKitchenId(menuId: $menuId, kitchenId: $kitchenId)\n    }\n  }\n}": types.UpdateCookMenuKitchenIdDocument,
    "mutation UpdateCookMenuPreparationTime($menuId: String!, $preparationTime: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePreparationTime(\n        menuId: $menuId\n        preparationTime: $preparationTime\n      )\n    }\n  }\n}": types.UpdateCookMenuPreparationTimeDocument,
    "mutation UpdateCookMenuPricePerAdult($menuId: String!, $pricePerAdult: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePricePerAdult(menuId: $menuId, pricePerAdult: $pricePerAdult)\n    }\n  }\n}": types.UpdateCookMenuPricePerAdultDocument,
    "mutation UpdateCookMenuPricePerChild($menuId: String!, $cookId: String!, $pricePerChild: UnsignedInt) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePricePerChild(menuId: $menuId, pricePerChild: $pricePerChild)\n    }\n  }\n}": types.UpdateCookMenuPricePerChildDocument,
    "mutation UpdateCookMenuTitle($menuId: String!, $title: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateTitle(menuId: $menuId, title: $title)\n    }\n  }\n}": types.UpdateCookMenuTitleDocument,
    "mutation ConfirmOneOneTimeAccessToken($secret: String!) {\n  users {\n    oneTimeAccessToken(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}": types.ConfirmOneOneTimeAccessTokenDocument,
    "mutation CreateOneOneTimeAccessTokenByEmailAddress($emailAddress: EmailAddress!) {\n  users {\n    oneTimeAccessToken(userId: \"\") {\n      success: createOneForEmailAddress(emailAddress: $emailAddress)\n    }\n  }\n}": types.CreateOneOneTimeAccessTokenByEmailAddressDocument,
    "mutation ConfirmOnePhoneNumberUpdate($secret: String!) {\n  users {\n    phoneNumberUpdate(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}": types.ConfirmOnePhoneNumberUpdateDocument,
    "mutation CreateOnePhoneNumberUpdate($phoneNumber: PhoneNumber!, $userId: String!) {\n  users {\n    phoneNumberUpdate(userId: $userId) {\n      success: createOne(phoneNumber: $phoneNumber)\n    }\n  }\n}": types.CreateOnePhoneNumberUpdateDocument,
    "mutation UpdateUserProfilePicture($userId: String!, $profilePicture: Upload) {\n  users {\n    success: updateProfilePicture(userId: $userId, profilePicture: $profilePicture)\n  }\n}": types.UpdateUserProfilePictureDocument,
    "query GetPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n}": types.GetPageDataDocument,
    "query GetPrivacyPolicyPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicPrivacyPolicyUpdates {\n    findLatest {\n      privacyPolicyUpdateId\n      englishText\n      germanText\n      createdAt\n    }\n  }\n}": types.GetPrivacyPolicyPageDataDocument,
    "query GetSignedInUser {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n}": types.GetSignedInUserDocument,
    "query GetTermsAndConditionsPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicTermsUpdates {\n    findLatest {\n      termsUpdateId\n      englishText\n      germanText\n      createdAt\n    }\n  }\n}": types.GetTermsAndConditionsPageDataDocument,
    "query CookGetStripeDashboardUrl($cookId: String!) {\n  cooks {\n    getStripeDashboardUrl(cookId: $cookId)\n  }\n}": types.CookGetStripeDashboardUrlDocument,
    "query CookGetStripeOnboardingUrl($cookId: String!) {\n  cooks {\n    getStripeOnboardingUrl(cookId: $cookId)\n  }\n}": types.CookGetStripeOnboardingUrlDocument,
    "query GetCookProfileMeals($cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}": types.GetCookProfileMealsDocument,
    "query GetCookProfileMenu($menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      findOne(menuId: $menuId) {\n        menuId\n        isVisible\n        title\n        description\n        basePrice\n        basePriceCustomers\n        pricePerAdult\n        pricePerChild\n        currencyCode\n        greetingFromKitchen\n        preparationTime\n        kitchen {\n          kitchenId\n          title\n        }\n        categories {\n          categoryId\n          title\n        }\n        courses {\n          courseId\n          index\n          title\n          mealOptions {\n            index\n            meal {\n              mealId\n              title\n              description\n              imageUrl\n              type\n              createdAt\n            }\n          }\n        }\n        createdAt\n      }\n    }\n  }\n}": types.GetCookProfileMenuDocument,
    "query GetCookProfilePersonalInformation($cookId: String!) {\n  cooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        firstName\n        lastName\n        profilePictureUrl\n        addresses {\n          addressId\n          title\n          country\n          city\n          postCode\n          street\n          houseNumber\n          location {\n            latitude\n            longitude\n          }\n          createdAt\n        }\n      }\n      languages {\n        languageId\n        title\n      }\n      isLocked\n      isVisible\n      biography\n      location {\n        latitude\n        longitude\n      }\n      maximumParticipants\n      maximumPrice\n      maximumTravelDistance\n      minimumParticipants\n      minimumPrice\n      rank\n      travelExpenses\n      ratingAverage\n      ratingCount\n      hasStripePayoutMethodActivated\n    }\n  }\n}": types.GetCookProfilePersonalInformationDocument,
    "query GetMeals($cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        cookId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}": types.GetMealsDocument,
    "query GetCookProfileBookingsPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    findOne(cookId: $cookId) {\n      hasStripePayoutMethodActivated\n    }\n    bookingRequests(cookId: $cookId) {\n      findMany {\n        bookingRequestId\n        globalBookingRequestId\n        adultParticipants\n        children\n        dateTime\n        status\n        userAccepted\n        cookAccepted\n        kitchenId\n        occasion\n        preparationTime\n        price {\n          amount\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        duration\n        createdAt\n        cook {\n          cookId\n          rank\n          user {\n            firstName\n            profilePictureUrl\n          }\n        }\n        configuredMenu {\n          title\n        }\n      }\n    }\n  }\n}": types.GetCookProfileBookingsPageDataDocument,
    "query GetCookProfileMealPageData($cookId: String!, $mealId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    meals(cookId: $cookId) {\n      findOne(mealId: $mealId) {\n        mealId\n        title\n        description\n        imageUrl\n        type\n        createdAt\n      }\n    }\n  }\n}": types.GetCookProfileMealPageDataDocument,
    "query GetCookProfileMealsPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}": types.GetCookProfileMealsPageDataDocument,
    "query GetCookProfileMenuPageData($menuId: String!, $cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n      cook {\n        meals {\n          mealId\n          cookId\n          title\n          type\n          description\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n  cooks {\n    menus(cookId: $cookId) {\n      findOne(menuId: $menuId) {\n        menuId\n        isVisible\n        title\n        description\n        basePrice\n        basePriceCustomers\n        pricePerAdult\n        pricePerChild\n        currencyCode\n        greetingFromKitchen\n        preparationTime\n        kitchen {\n          kitchenId\n          title\n        }\n        categories {\n          categoryId\n          title\n        }\n        courses {\n          courseId\n          index\n          title\n          mealOptions {\n            index\n            meal {\n              mealId\n              title\n              description\n              imageUrl\n              type\n              createdAt\n            }\n          }\n        }\n        createdAt\n      }\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n}": types.GetCookProfileMenuPageDataDocument,
    "query GetCookProfileMenusCreatePageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n      cook {\n        meals {\n          mealId\n          cookId\n          title\n          type\n          description\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n}": types.GetCookProfileMenusCreatePageDataDocument,
    "query GetCookProfileMenusPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    menus(cookId: $cookId) {\n      findMany {\n        menuId\n        title\n        description\n        basePrice\n        basePriceCustomers\n        createdAt\n        currencyCode\n        preparationTime\n        pricePerAdult\n        pricePerChild\n        isVisible\n        categories {\n          categoryId\n          title\n        }\n        kitchen {\n          kitchenId\n          title\n        }\n        imageUrls\n      }\n    }\n  }\n}": types.GetCookProfileMenusPageDataDocument,
    "query GetCookProfilePersonalInformationPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  languages {\n    findAll {\n      languageId\n      title\n    }\n  }\n  cooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        firstName\n        lastName\n        profilePictureUrl\n        addresses {\n          addressId\n          title\n          country\n          city\n          postCode\n          street\n          houseNumber\n          location {\n            latitude\n            longitude\n          }\n          createdAt\n        }\n      }\n      languages {\n        languageId\n        title\n      }\n      isLocked\n      isVisible\n      biography\n      location {\n        latitude\n        longitude\n      }\n      maximumParticipants\n      maximumPrice\n      maximumTravelDistance\n      minimumParticipants\n      minimumPrice\n      rank\n      travelExpenses\n      ratingAverage\n      ratingCount\n      hasStripePayoutMethodActivated\n    }\n  }\n}": types.GetCookProfilePersonalInformationPageDataDocument,
    "query GetCookSignUpPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  languages {\n    findAll {\n      languageId\n      title\n    }\n  }\n}": types.GetCookSignUpPageDataDocument,
    "query GetPublicCookPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      maximumTravelDistance\n      createdAt\n      languages {\n        languageId\n        title\n      }\n      menus {\n        title\n        pricePerChild\n        pricePerAdult\n        preparationTime\n        menuId\n        kitchen {\n          kitchenId\n          title\n        }\n        basePrice\n        basePriceCustomers\n        categories {\n          categoryId\n          title\n        }\n        imageUrls\n        currencyCode\n        description\n        greetingFromKitchen\n        createdAt\n      }\n    }\n  }\n  categories {\n    findAll {\n      ...CategoryOption\n    }\n  }\n  kitchens {\n    findAll {\n      ...KitchenOption\n    }\n  }\n  allergies {\n    findAll {\n      ...AllergyOption\n    }\n  }\n}": types.GetPublicCookPageDataDocument,
    "query GetPublicCooksPageData($request: FindManyPublicCooksRequest!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findMany(request: $request) {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      createdAt\n      menuCount\n    }\n  }\n}": types.GetPublicCooksPageDataDocument,
    "query GetGlobalBookingRequestPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n  allergies {\n    findAll {\n      allergyId\n      title\n    }\n  }\n}": types.GetGlobalBookingRequestPageDataDocument,
    "query GetHomePageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findHeroes {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      createdAt\n    }\n  }\n  publicMenus {\n    findHeroes {\n      menuId\n      title\n      description\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        user {\n          firstName\n          profilePictureUrl\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n    }\n  }\n}": types.GetHomePageDataDocument,
    "query GetPublicMenuPageData($menuId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicMenus {\n    findOne(menuId: $menuId) {\n      menuId\n      title\n      description\n      greetingFromKitchen\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        city\n        travelExpenses\n        maximumTravelDistance\n        user {\n          firstName\n          profilePictureUrl\n        }\n        location {\n          latitude\n          longitude\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      courses {\n        index\n        courseId\n        title\n        mealOptions {\n          index\n          meal {\n            mealId\n            title\n            description\n            type\n            imageUrl\n          }\n        }\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n    }\n  }\n  allergies {\n    findAll {\n      allergyId\n      title\n    }\n  }\n  stripePublishableKey\n}": types.GetPublicMenuPageDataDocument,
    "query GetPublicMenusPageData($request: FindManyPublicMenusRequest!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicMenus {\n    findMany(request: $request) {\n      menuId\n      title\n      description\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        user {\n          firstName\n          profilePictureUrl\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n      courseCount\n    }\n  }\n}": types.GetPublicMenusPageDataDocument,
    "mutation UserBookingRequestConfirmPaymentSetup($userId: String!, $bookingRequestId: String!) {\n  users {\n    bookingRequests(userId: $userId) {\n      success: confirmPaymentSetup(bookingRequestId: $bookingRequestId)\n    }\n  }\n}": types.UserBookingRequestConfirmPaymentSetupDocument,
    "query GetProfilePersonalInformation {\n  users {\n    me {\n      userId\n      firstName\n      lastName\n      profilePictureUrl\n      birthDate\n      gender\n      acceptedTerms\n      acceptedPrivacyPolicy\n      emailAddress\n      phoneNumber\n      createdAt\n      isCook\n      isAdmin\n      addresses {\n        addressId\n        title\n        country\n        city\n        postCode\n        street\n        houseNumber\n        location {\n          latitude\n          longitude\n        }\n        createdAt\n      }\n      emailAddressUpdate {\n        emailAddress\n        createdAt\n      }\n      phoneNumberUpdate {\n        phoneNumber\n        createdAt\n      }\n    }\n  }\n}": types.GetProfilePersonalInformationDocument,
    "query GetProfileBookingsPageData($userId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    bookingRequests(userId: $userId) {\n      findMany {\n        bookingRequestId\n        globalBookingRequestId\n        adultParticipants\n        children\n        dateTime\n        status\n        userAccepted\n        cookAccepted\n        kitchenId\n        occasion\n        preparationTime\n        price {\n          amount\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        duration\n        createdAt\n        cook {\n          cookId\n          rank\n          user {\n            firstName\n            profilePictureUrl\n          }\n        }\n        configuredMenu {\n          title\n        }\n      }\n    }\n    globalBookingRequests(userId: $userId) {\n      findMany {\n        globalBookingRequestId\n        children\n        adultParticipants\n        occasion\n        message\n        dateTime\n        duration\n        priceClass {\n          type\n          min\n          max\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        createdAt\n      }\n    }\n  }\n}": types.GetProfileBookingsPageDataDocument,
    "query GetProfileFavoriteCooksPageData($userId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    followings(userId: $userId) {\n      findAll {\n        cookId\n        cook {\n          user {\n            firstName\n            profilePictureUrl\n          }\n          rank\n          city\n          location {\n            text\n            longitude\n            latitude\n          }\n        }\n      }\n    }\n  }\n}": types.GetProfileFavoriteCooksPageDataDocument,
    "query GetProfilePersonalInformationPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    me {\n      userId\n      firstName\n      lastName\n      profilePictureUrl\n      birthDate\n      gender\n      acceptedTerms\n      acceptedPrivacyPolicy\n      emailAddress\n      phoneNumber\n      createdAt\n      isCook\n      isAdmin\n      addresses {\n        addressId\n        title\n        country\n        city\n        postCode\n        street\n        houseNumber\n        location {\n          latitude\n          longitude\n        }\n        createdAt\n      }\n      emailAddressUpdate {\n        emailAddress\n        createdAt\n      }\n      phoneNumberUpdate {\n        phoneNumber\n        createdAt\n      }\n    }\n  }\n}": types.GetProfilePersonalInformationPageDataDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment AllergyOption on Allergy {\n  allergyId\n  title\n}"): (typeof documents)["fragment AllergyOption on Allergy {\n  allergyId\n  title\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment CategoryOption on Category {\n  categoryId\n  title\n}"): (typeof documents)["fragment CategoryOption on Category {\n  categoryId\n  title\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment KitchenOption on Kitchen {\n  kitchenId\n  title\n}"): (typeof documents)["fragment KitchenOption on Kitchen {\n  kitchenId\n  title\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LanguageOption on Language {\n  languageId\n  title\n}"): (typeof documents)["fragment LanguageOption on Language {\n  languageId\n  title\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment SignedInUser on User {\n  userId\n  firstName\n  profilePictureUrl\n  isCook\n  isAdmin\n}"): (typeof documents)["fragment SignedInUser on User {\n  userId\n  firstName\n  profilePictureUrl\n  isCook\n  isAdmin\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AssignOneSessionByEmailAddress($request: CreateOneSessionByEmailAddressRequest!) {\n  sessions {\n    success: assignOneByEmailAddress(request: $request)\n  }\n}"): (typeof documents)["mutation AssignOneSessionByEmailAddress($request: CreateOneSessionByEmailAddressRequest!) {\n  sessions {\n    success: assignOneByEmailAddress(request: $request)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneCook($cookId: String!, $request: CreateOneCookRequest!) {\n  cooks {\n    success: createOne(cookId: $cookId, request: $request)\n  }\n}"): (typeof documents)["mutation CreateOneCook($cookId: String!, $request: CreateOneCookRequest!) {\n  cooks {\n    success: createOne(cookId: $cookId, request: $request)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneUserByEmailAddress($request: CreateOneUserByEmailAddressRequest!, $profilePicture: Upload) {\n  users {\n    success: createOneByEmailAddress(\n      request: $request\n      profilePicture: $profilePicture\n    )\n  }\n}"): (typeof documents)["mutation CreateOneUserByEmailAddress($request: CreateOneUserByEmailAddressRequest!, $profilePicture: Upload) {\n  users {\n    success: createOneByEmailAddress(\n      request: $request\n      profilePicture: $profilePicture\n    )\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation ExpireCurrentSession($userId: String!) {\n  users {\n    sessions(userId: $userId) {\n      success: expireCurrent\n    }\n  }\n}"): (typeof documents)["mutation ExpireCurrentSession($userId: String!) {\n  users {\n    sessions(userId: $userId) {\n      success: expireCurrent\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneUserBookingRequest($request: CreateBookingRequestRequest!, $userId: String!) {\n  users {\n    bookingRequests(userId: $userId) {\n      createOne(request: $request) {\n        success\n        clientSecret\n        bookingRequestId\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateOneUserBookingRequest($request: CreateBookingRequestRequest!, $userId: String!) {\n  users {\n    bookingRequests(userId: $userId) {\n      createOne(request: $request) {\n        success\n        clientSecret\n        bookingRequestId\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneUserGlobalBookingRequest($userId: String!, $request: CreateOneGlobalBookingRequestRequest!) {\n  users {\n    globalBookingRequests(userId: $userId) {\n      success: createOne(request: $request)\n    }\n  }\n}"): (typeof documents)["mutation CreateOneUserGlobalBookingRequest($userId: String!, $request: CreateOneGlobalBookingRequestRequest!) {\n  users {\n    globalBookingRequests(userId: $userId) {\n      success: createOne(request: $request)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookBiography($cookId: String!, $biography: String!) {\n  cooks {\n    success: updateBiography(cookId: $cookId, biography: $biography)\n  }\n}"): (typeof documents)["mutation UpdateCookBiography($cookId: String!, $biography: String!) {\n  cooks {\n    success: updateBiography(cookId: $cookId, biography: $biography)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookIsVisible($cookId: String!, $isVisible: Boolean!) {\n  cooks {\n    success: updateIsVisible(cookId: $cookId, isVisible: $isVisible)\n  }\n}"): (typeof documents)["mutation UpdateCookIsVisible($cookId: String!, $isVisible: Boolean!) {\n  cooks {\n    success: updateIsVisible(cookId: $cookId, isVisible: $isVisible)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookLocation($cookId: String!, $location: LocationInput!) {\n  cooks {\n    success: updateLocation(cookId: $cookId, location: $location)\n  }\n}"): (typeof documents)["mutation UpdateCookLocation($cookId: String!, $location: LocationInput!) {\n  cooks {\n    success: updateLocation(cookId: $cookId, location: $location)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMaximumParticipants($cookId: String!, $maximumParticipants: UnsignedInt) {\n  cooks {\n    success: updateMaximumParticipants(\n      cookId: $cookId\n      maximumParticipants: $maximumParticipants\n    )\n  }\n}"): (typeof documents)["mutation UpdateCookMaximumParticipants($cookId: String!, $maximumParticipants: UnsignedInt) {\n  cooks {\n    success: updateMaximumParticipants(\n      cookId: $cookId\n      maximumParticipants: $maximumParticipants\n    )\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMaximumPrice($cookId: String!) {\n  cooks {\n    success: updateMaximumPrice(cookId: $cookId)\n  }\n}"): (typeof documents)["mutation UpdateCookMaximumPrice($cookId: String!) {\n  cooks {\n    success: updateMaximumPrice(cookId: $cookId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMaximumTravelDistance($cookId: String!, $maximumTravelDistance: UnsignedInt) {\n  cooks {\n    success: updateMaximumTravelDistance(\n      cookId: $cookId\n      maximumTravelDistance: $maximumTravelDistance\n    )\n  }\n}"): (typeof documents)["mutation UpdateCookMaximumTravelDistance($cookId: String!, $maximumTravelDistance: UnsignedInt) {\n  cooks {\n    success: updateMaximumTravelDistance(\n      cookId: $cookId\n      maximumTravelDistance: $maximumTravelDistance\n    )\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMinimumParticipants($cookId: String!) {\n  cooks {\n    success: updateMinimumParticipants(cookId: $cookId)\n  }\n}"): (typeof documents)["mutation UpdateCookMinimumParticipants($cookId: String!) {\n  cooks {\n    success: updateMinimumParticipants(cookId: $cookId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMinimumPrice($cookId: String!) {\n  cooks {\n    success: updateMinimumPrice(cookId: $cookId)\n  }\n}"): (typeof documents)["mutation UpdateCookMinimumPrice($cookId: String!) {\n  cooks {\n    success: updateMinimumPrice(cookId: $cookId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookRank($cookId: String!, $rank: CookRank!) {\n  cooks {\n    success: updateRank(cookId: $cookId, rank: $rank)\n  }\n}"): (typeof documents)["mutation UpdateCookRank($cookId: String!, $rank: CookRank!) {\n  cooks {\n    success: updateRank(cookId: $cookId, rank: $rank)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookTravelExpenses($cookId: String!, $travelExpenses: UnsignedInt!) {\n  cooks {\n    success: updateTravelExpenses(cookId: $cookId, travelExpenses: $travelExpenses)\n  }\n}"): (typeof documents)["mutation UpdateCookTravelExpenses($cookId: String!, $travelExpenses: UnsignedInt!) {\n  cooks {\n    success: updateTravelExpenses(cookId: $cookId, travelExpenses: $travelExpenses)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneUserAddress($address: CreateOneAddressRequest!, $userId: String!) {\n  users {\n    addresses(userId: $userId) {\n      success: createOne(address: $address)\n    }\n  }\n}"): (typeof documents)["mutation CreateOneUserAddress($address: CreateOneAddressRequest!, $userId: String!) {\n  users {\n    addresses(userId: $userId) {\n      success: createOne(address: $address)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteOneUserAddress($addressId: String!, $userId: String!) {\n  users {\n    addresses(userId: $userId) {\n      success: deleteOne(addressId: $addressId)\n    }\n  }\n}"): (typeof documents)["mutation DeleteOneUserAddress($addressId: String!, $userId: String!) {\n  users {\n    addresses(userId: $userId) {\n      success: deleteOne(addressId: $addressId)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddOneCookLanguage($cookId: String!, $languageId: String!) {\n  cooks {\n    success: addOneLanguage(cookId: $cookId, languageId: $languageId)\n  }\n}"): (typeof documents)["mutation AddOneCookLanguage($cookId: String!, $languageId: String!) {\n  cooks {\n    success: addOneLanguage(cookId: $cookId, languageId: $languageId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation RemoveOneCookLanguage($cookId: String!, $languageId: String!) {\n  cooks {\n    success: removeOneLanguage(cookId: $cookId, languageId: $languageId)\n  }\n}"): (typeof documents)["mutation RemoveOneCookLanguage($cookId: String!, $languageId: String!) {\n  cooks {\n    success: removeOneLanguage(cookId: $cookId, languageId: $languageId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation ConfirmOneEmailAddressUpdate($secret: String!) {\n  users {\n    emailAddressUpdate(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}"): (typeof documents)["mutation ConfirmOneEmailAddressUpdate($secret: String!) {\n  users {\n    emailAddressUpdate(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneEmailAddressUpdate($emailAddress: EmailAddress!, $userId: String!) {\n  users {\n    emailAddressUpdate(userId: $userId) {\n      success: createOne(emailAddress: $emailAddress)\n    }\n  }\n}"): (typeof documents)["mutation CreateOneEmailAddressUpdate($emailAddress: EmailAddress!, $userId: String!) {\n  users {\n    emailAddressUpdate(userId: $userId) {\n      success: createOne(emailAddress: $emailAddress)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateMeal($meal: CreateOneMealRequest!, $cookId: String!, $image: Upload) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: createOne(meal: $meal, image: $image)\n    }\n  }\n}"): (typeof documents)["mutation CreateMeal($meal: CreateOneMealRequest!, $cookId: String!, $image: Upload) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: createOne(meal: $meal, image: $image)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteOneCookMeal($mealId: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: deleteOne(mealId: $mealId)\n    }\n  }\n}"): (typeof documents)["mutation DeleteOneCookMeal($mealId: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: deleteOne(mealId: $mealId)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMealDescription($mealId: String!, $description: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateDescription(mealId: $mealId, description: $description)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMealDescription($mealId: String!, $description: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateDescription(mealId: $mealId, description: $description)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMealImage($mealId: String!, $cookId: String!, $image: Upload) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateImage(mealId: $mealId, image: $image)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMealImage($mealId: String!, $cookId: String!, $image: Upload) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateImage(mealId: $mealId, image: $image)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMealTitle($mealId: String!, $title: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateTitle(mealId: $mealId, title: $title)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMealTitle($mealId: String!, $title: String!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateTitle(mealId: $mealId, title: $title)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMealType($mealId: String!, $type: MealType!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateType(mealId: $mealId, type: $type)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMealType($mealId: String!, $type: MealType!, $cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      success: updateType(mealId: $mealId, type: $type)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateManyCookMenuCourseMealOptions($menuId: String!, $cookId: String!, $mealOptions: [CreateOneMealOptionRequest!]!, $courseId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        mealOptions(courseId: $courseId) {\n          success: createMany(mealOptions: $mealOptions)\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateManyCookMenuCourseMealOptions($menuId: String!, $cookId: String!, $mealOptions: [CreateOneMealOptionRequest!]!, $courseId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        mealOptions(courseId: $courseId) {\n          success: createMany(mealOptions: $mealOptions)\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneCookMenu($menu: CreateOneMenuRequest!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: createOne(menu: $menu)\n    }\n  }\n}"): (typeof documents)["mutation CreateOneCookMenu($menu: CreateOneMenuRequest!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: createOne(menu: $menu)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneCookMenuCourse($request: CreateOneCourseRequest!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        success: createOne(request: $request)\n      }\n    }\n  }\n}"): (typeof documents)["mutation CreateOneCookMenuCourse($request: CreateOneCourseRequest!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        success: createOne(request: $request)\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteOneCookMenu($menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: deleteOne(menuId: $menuId)\n    }\n  }\n}"): (typeof documents)["mutation DeleteOneCookMenu($menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: deleteOne(menuId: $menuId)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteOneCookMenuCourse($courseId: String!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        success: deleteOne(courseId: $courseId)\n      }\n    }\n  }\n}"): (typeof documents)["mutation DeleteOneCookMenuCourse($courseId: String!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        success: deleteOne(courseId: $courseId)\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteOneCookMenuCourseMealOption($mealId: String!, $courseId: String!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        mealOptions(courseId: $courseId) {\n          deleteOne(mealId: $mealId)\n        }\n      }\n    }\n  }\n}"): (typeof documents)["mutation DeleteOneCookMenuCourseMealOption($mealId: String!, $courseId: String!, $menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      courses(menuId: $menuId) {\n        mealOptions(courseId: $courseId) {\n          deleteOne(mealId: $mealId)\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuBasePrice($menuId: String!, $basePrice: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateBasePrice(menuId: $menuId, basePrice: $basePrice)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuBasePrice($menuId: String!, $basePrice: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateBasePrice(menuId: $menuId, basePrice: $basePrice)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuBasePriceCustomers($menuId: String!, $basePriceCustomers: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateBasePriceCustomers(\n        menuId: $menuId\n        basePriceCustomers: $basePriceCustomers\n      )\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuBasePriceCustomers($menuId: String!, $basePriceCustomers: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateBasePriceCustomers(\n        menuId: $menuId\n        basePriceCustomers: $basePriceCustomers\n      )\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuCurrencyCode($menuId: String!, $currencyCode: CurrencyCode!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateCurrencyCode(menuId: $menuId, currencyCode: $currencyCode)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuCurrencyCode($menuId: String!, $currencyCode: CurrencyCode!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateCurrencyCode(menuId: $menuId, currencyCode: $currencyCode)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuDescription($menuId: String!, $description: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateDescription(menuId: $menuId, description: $description)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuDescription($menuId: String!, $description: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateDescription(menuId: $menuId, description: $description)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuGreetingFromKitchen($menuId: String!, $cookId: String!, $greetingFromKitchen: String) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateGreetingFromKitchen(\n        menuId: $menuId\n        greetingFromKitchen: $greetingFromKitchen\n      )\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuGreetingFromKitchen($menuId: String!, $cookId: String!, $greetingFromKitchen: String) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateGreetingFromKitchen(\n        menuId: $menuId\n        greetingFromKitchen: $greetingFromKitchen\n      )\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuIsVisible($menuId: String!, $isVisible: Boolean!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateIsVisible(menuId: $menuId, isVisible: $isVisible)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuIsVisible($menuId: String!, $isVisible: Boolean!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateIsVisible(menuId: $menuId, isVisible: $isVisible)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuKitchenId($menuId: String!, $cookId: String!, $kitchenId: String) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateKitchenId(menuId: $menuId, kitchenId: $kitchenId)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuKitchenId($menuId: String!, $cookId: String!, $kitchenId: String) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateKitchenId(menuId: $menuId, kitchenId: $kitchenId)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuPreparationTime($menuId: String!, $preparationTime: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePreparationTime(\n        menuId: $menuId\n        preparationTime: $preparationTime\n      )\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuPreparationTime($menuId: String!, $preparationTime: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePreparationTime(\n        menuId: $menuId\n        preparationTime: $preparationTime\n      )\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuPricePerAdult($menuId: String!, $pricePerAdult: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePricePerAdult(menuId: $menuId, pricePerAdult: $pricePerAdult)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuPricePerAdult($menuId: String!, $pricePerAdult: UnsignedInt!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePricePerAdult(menuId: $menuId, pricePerAdult: $pricePerAdult)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuPricePerChild($menuId: String!, $cookId: String!, $pricePerChild: UnsignedInt) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePricePerChild(menuId: $menuId, pricePerChild: $pricePerChild)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuPricePerChild($menuId: String!, $cookId: String!, $pricePerChild: UnsignedInt) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updatePricePerChild(menuId: $menuId, pricePerChild: $pricePerChild)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCookMenuTitle($menuId: String!, $title: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateTitle(menuId: $menuId, title: $title)\n    }\n  }\n}"): (typeof documents)["mutation UpdateCookMenuTitle($menuId: String!, $title: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      success: updateTitle(menuId: $menuId, title: $title)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation ConfirmOneOneTimeAccessToken($secret: String!) {\n  users {\n    oneTimeAccessToken(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}"): (typeof documents)["mutation ConfirmOneOneTimeAccessToken($secret: String!) {\n  users {\n    oneTimeAccessToken(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOneOneTimeAccessTokenByEmailAddress($emailAddress: EmailAddress!) {\n  users {\n    oneTimeAccessToken(userId: \"\") {\n      success: createOneForEmailAddress(emailAddress: $emailAddress)\n    }\n  }\n}"): (typeof documents)["mutation CreateOneOneTimeAccessTokenByEmailAddress($emailAddress: EmailAddress!) {\n  users {\n    oneTimeAccessToken(userId: \"\") {\n      success: createOneForEmailAddress(emailAddress: $emailAddress)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation ConfirmOnePhoneNumberUpdate($secret: String!) {\n  users {\n    phoneNumberUpdate(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}"): (typeof documents)["mutation ConfirmOnePhoneNumberUpdate($secret: String!) {\n  users {\n    phoneNumberUpdate(userId: \"\") {\n      success: confirm(secret: $secret)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation CreateOnePhoneNumberUpdate($phoneNumber: PhoneNumber!, $userId: String!) {\n  users {\n    phoneNumberUpdate(userId: $userId) {\n      success: createOne(phoneNumber: $phoneNumber)\n    }\n  }\n}"): (typeof documents)["mutation CreateOnePhoneNumberUpdate($phoneNumber: PhoneNumber!, $userId: String!) {\n  users {\n    phoneNumberUpdate(userId: $userId) {\n      success: createOne(phoneNumber: $phoneNumber)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateUserProfilePicture($userId: String!, $profilePicture: Upload) {\n  users {\n    success: updateProfilePicture(userId: $userId, profilePicture: $profilePicture)\n  }\n}"): (typeof documents)["mutation UpdateUserProfilePicture($userId: String!, $profilePicture: Upload) {\n  users {\n    success: updateProfilePicture(userId: $userId, profilePicture: $profilePicture)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n}"): (typeof documents)["query GetPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPrivacyPolicyPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicPrivacyPolicyUpdates {\n    findLatest {\n      privacyPolicyUpdateId\n      englishText\n      germanText\n      createdAt\n    }\n  }\n}"): (typeof documents)["query GetPrivacyPolicyPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicPrivacyPolicyUpdates {\n    findLatest {\n      privacyPolicyUpdateId\n      englishText\n      germanText\n      createdAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetSignedInUser {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n}"): (typeof documents)["query GetSignedInUser {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetTermsAndConditionsPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicTermsUpdates {\n    findLatest {\n      termsUpdateId\n      englishText\n      germanText\n      createdAt\n    }\n  }\n}"): (typeof documents)["query GetTermsAndConditionsPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicTermsUpdates {\n    findLatest {\n      termsUpdateId\n      englishText\n      germanText\n      createdAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query CookGetStripeDashboardUrl($cookId: String!) {\n  cooks {\n    getStripeDashboardUrl(cookId: $cookId)\n  }\n}"): (typeof documents)["query CookGetStripeDashboardUrl($cookId: String!) {\n  cooks {\n    getStripeDashboardUrl(cookId: $cookId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query CookGetStripeOnboardingUrl($cookId: String!) {\n  cooks {\n    getStripeOnboardingUrl(cookId: $cookId)\n  }\n}"): (typeof documents)["query CookGetStripeOnboardingUrl($cookId: String!) {\n  cooks {\n    getStripeOnboardingUrl(cookId: $cookId)\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMeals($cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMeals($cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMenu($menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      findOne(menuId: $menuId) {\n        menuId\n        isVisible\n        title\n        description\n        basePrice\n        basePriceCustomers\n        pricePerAdult\n        pricePerChild\n        currencyCode\n        greetingFromKitchen\n        preparationTime\n        kitchen {\n          kitchenId\n          title\n        }\n        categories {\n          categoryId\n          title\n        }\n        courses {\n          courseId\n          index\n          title\n          mealOptions {\n            index\n            meal {\n              mealId\n              title\n              description\n              imageUrl\n              type\n              createdAt\n            }\n          }\n        }\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMenu($menuId: String!, $cookId: String!) {\n  cooks {\n    menus(cookId: $cookId) {\n      findOne(menuId: $menuId) {\n        menuId\n        isVisible\n        title\n        description\n        basePrice\n        basePriceCustomers\n        pricePerAdult\n        pricePerChild\n        currencyCode\n        greetingFromKitchen\n        preparationTime\n        kitchen {\n          kitchenId\n          title\n        }\n        categories {\n          categoryId\n          title\n        }\n        courses {\n          courseId\n          index\n          title\n          mealOptions {\n            index\n            meal {\n              mealId\n              title\n              description\n              imageUrl\n              type\n              createdAt\n            }\n          }\n        }\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfilePersonalInformation($cookId: String!) {\n  cooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        firstName\n        lastName\n        profilePictureUrl\n        addresses {\n          addressId\n          title\n          country\n          city\n          postCode\n          street\n          houseNumber\n          location {\n            latitude\n            longitude\n          }\n          createdAt\n        }\n      }\n      languages {\n        languageId\n        title\n      }\n      isLocked\n      isVisible\n      biography\n      location {\n        latitude\n        longitude\n      }\n      maximumParticipants\n      maximumPrice\n      maximumTravelDistance\n      minimumParticipants\n      minimumPrice\n      rank\n      travelExpenses\n      ratingAverage\n      ratingCount\n      hasStripePayoutMethodActivated\n    }\n  }\n}"): (typeof documents)["query GetCookProfilePersonalInformation($cookId: String!) {\n  cooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        firstName\n        lastName\n        profilePictureUrl\n        addresses {\n          addressId\n          title\n          country\n          city\n          postCode\n          street\n          houseNumber\n          location {\n            latitude\n            longitude\n          }\n          createdAt\n        }\n      }\n      languages {\n        languageId\n        title\n      }\n      isLocked\n      isVisible\n      biography\n      location {\n        latitude\n        longitude\n      }\n      maximumParticipants\n      maximumPrice\n      maximumTravelDistance\n      minimumParticipants\n      minimumPrice\n      rank\n      travelExpenses\n      ratingAverage\n      ratingCount\n      hasStripePayoutMethodActivated\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetMeals($cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        cookId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetMeals($cookId: String!) {\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        cookId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileBookingsPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    findOne(cookId: $cookId) {\n      hasStripePayoutMethodActivated\n    }\n    bookingRequests(cookId: $cookId) {\n      findMany {\n        bookingRequestId\n        globalBookingRequestId\n        adultParticipants\n        children\n        dateTime\n        status\n        userAccepted\n        cookAccepted\n        kitchenId\n        occasion\n        preparationTime\n        price {\n          amount\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        duration\n        createdAt\n        cook {\n          cookId\n          rank\n          user {\n            firstName\n            profilePictureUrl\n          }\n        }\n        configuredMenu {\n          title\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetCookProfileBookingsPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    findOne(cookId: $cookId) {\n      hasStripePayoutMethodActivated\n    }\n    bookingRequests(cookId: $cookId) {\n      findMany {\n        bookingRequestId\n        globalBookingRequestId\n        adultParticipants\n        children\n        dateTime\n        status\n        userAccepted\n        cookAccepted\n        kitchenId\n        occasion\n        preparationTime\n        price {\n          amount\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        duration\n        createdAt\n        cook {\n          cookId\n          rank\n          user {\n            firstName\n            profilePictureUrl\n          }\n        }\n        configuredMenu {\n          title\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMealPageData($cookId: String!, $mealId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    meals(cookId: $cookId) {\n      findOne(mealId: $mealId) {\n        mealId\n        title\n        description\n        imageUrl\n        type\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMealPageData($cookId: String!, $mealId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    meals(cookId: $cookId) {\n      findOne(mealId: $mealId) {\n        mealId\n        title\n        description\n        imageUrl\n        type\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMealsPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMealsPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    meals(cookId: $cookId) {\n      findMany {\n        mealId\n        title\n        type\n        description\n        imageUrl\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMenuPageData($menuId: String!, $cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n      cook {\n        meals {\n          mealId\n          cookId\n          title\n          type\n          description\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n  cooks {\n    menus(cookId: $cookId) {\n      findOne(menuId: $menuId) {\n        menuId\n        isVisible\n        title\n        description\n        basePrice\n        basePriceCustomers\n        pricePerAdult\n        pricePerChild\n        currencyCode\n        greetingFromKitchen\n        preparationTime\n        kitchen {\n          kitchenId\n          title\n        }\n        categories {\n          categoryId\n          title\n        }\n        courses {\n          courseId\n          index\n          title\n          mealOptions {\n            index\n            meal {\n              mealId\n              title\n              description\n              imageUrl\n              type\n              createdAt\n            }\n          }\n        }\n        createdAt\n      }\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMenuPageData($menuId: String!, $cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n      cook {\n        meals {\n          mealId\n          cookId\n          title\n          type\n          description\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n  cooks {\n    menus(cookId: $cookId) {\n      findOne(menuId: $menuId) {\n        menuId\n        isVisible\n        title\n        description\n        basePrice\n        basePriceCustomers\n        pricePerAdult\n        pricePerChild\n        currencyCode\n        greetingFromKitchen\n        preparationTime\n        kitchen {\n          kitchenId\n          title\n        }\n        categories {\n          categoryId\n          title\n        }\n        courses {\n          courseId\n          index\n          title\n          mealOptions {\n            index\n            meal {\n              mealId\n              title\n              description\n              imageUrl\n              type\n              createdAt\n            }\n          }\n        }\n        createdAt\n      }\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMenusCreatePageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n      cook {\n        meals {\n          mealId\n          cookId\n          title\n          type\n          description\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMenusCreatePageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n      cook {\n        meals {\n          mealId\n          cookId\n          title\n          type\n          description\n          imageUrl\n          createdAt\n        }\n      }\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfileMenusPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    menus(cookId: $cookId) {\n      findMany {\n        menuId\n        title\n        description\n        basePrice\n        basePriceCustomers\n        createdAt\n        currencyCode\n        preparationTime\n        pricePerAdult\n        pricePerChild\n        isVisible\n        categories {\n          categoryId\n          title\n        }\n        kitchen {\n          kitchenId\n          title\n        }\n        imageUrls\n      }\n    }\n  }\n}"): (typeof documents)["query GetCookProfileMenusPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  cooks {\n    menus(cookId: $cookId) {\n      findMany {\n        menuId\n        title\n        description\n        basePrice\n        basePriceCustomers\n        createdAt\n        currencyCode\n        preparationTime\n        pricePerAdult\n        pricePerChild\n        isVisible\n        categories {\n          categoryId\n          title\n        }\n        kitchen {\n          kitchenId\n          title\n        }\n        imageUrls\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookProfilePersonalInformationPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  languages {\n    findAll {\n      languageId\n      title\n    }\n  }\n  cooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        firstName\n        lastName\n        profilePictureUrl\n        addresses {\n          addressId\n          title\n          country\n          city\n          postCode\n          street\n          houseNumber\n          location {\n            latitude\n            longitude\n          }\n          createdAt\n        }\n      }\n      languages {\n        languageId\n        title\n      }\n      isLocked\n      isVisible\n      biography\n      location {\n        latitude\n        longitude\n      }\n      maximumParticipants\n      maximumPrice\n      maximumTravelDistance\n      minimumParticipants\n      minimumPrice\n      rank\n      travelExpenses\n      ratingAverage\n      ratingCount\n      hasStripePayoutMethodActivated\n    }\n  }\n}"): (typeof documents)["query GetCookProfilePersonalInformationPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  languages {\n    findAll {\n      languageId\n      title\n    }\n  }\n  cooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        firstName\n        lastName\n        profilePictureUrl\n        addresses {\n          addressId\n          title\n          country\n          city\n          postCode\n          street\n          houseNumber\n          location {\n            latitude\n            longitude\n          }\n          createdAt\n        }\n      }\n      languages {\n        languageId\n        title\n      }\n      isLocked\n      isVisible\n      biography\n      location {\n        latitude\n        longitude\n      }\n      maximumParticipants\n      maximumPrice\n      maximumTravelDistance\n      minimumParticipants\n      minimumPrice\n      rank\n      travelExpenses\n      ratingAverage\n      ratingCount\n      hasStripePayoutMethodActivated\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCookSignUpPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  languages {\n    findAll {\n      languageId\n      title\n    }\n  }\n}"): (typeof documents)["query GetCookSignUpPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  languages {\n    findAll {\n      languageId\n      title\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPublicCookPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      maximumTravelDistance\n      createdAt\n      languages {\n        languageId\n        title\n      }\n      menus {\n        title\n        pricePerChild\n        pricePerAdult\n        preparationTime\n        menuId\n        kitchen {\n          kitchenId\n          title\n        }\n        basePrice\n        basePriceCustomers\n        categories {\n          categoryId\n          title\n        }\n        imageUrls\n        currencyCode\n        description\n        greetingFromKitchen\n        createdAt\n      }\n    }\n  }\n  categories {\n    findAll {\n      ...CategoryOption\n    }\n  }\n  kitchens {\n    findAll {\n      ...KitchenOption\n    }\n  }\n  allergies {\n    findAll {\n      ...AllergyOption\n    }\n  }\n}"): (typeof documents)["query GetPublicCookPageData($cookId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findOne(cookId: $cookId) {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      maximumTravelDistance\n      createdAt\n      languages {\n        languageId\n        title\n      }\n      menus {\n        title\n        pricePerChild\n        pricePerAdult\n        preparationTime\n        menuId\n        kitchen {\n          kitchenId\n          title\n        }\n        basePrice\n        basePriceCustomers\n        categories {\n          categoryId\n          title\n        }\n        imageUrls\n        currencyCode\n        description\n        greetingFromKitchen\n        createdAt\n      }\n    }\n  }\n  categories {\n    findAll {\n      ...CategoryOption\n    }\n  }\n  kitchens {\n    findAll {\n      ...KitchenOption\n    }\n  }\n  allergies {\n    findAll {\n      ...AllergyOption\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPublicCooksPageData($request: FindManyPublicCooksRequest!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findMany(request: $request) {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      createdAt\n      menuCount\n    }\n  }\n}"): (typeof documents)["query GetPublicCooksPageData($request: FindManyPublicCooksRequest!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findMany(request: $request) {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      createdAt\n      menuCount\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetGlobalBookingRequestPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n  allergies {\n    findAll {\n      allergyId\n      title\n    }\n  }\n}"): (typeof documents)["query GetGlobalBookingRequestPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  categories {\n    findAll {\n      categoryId\n      title\n    }\n  }\n  kitchens {\n    findAll {\n      kitchenId\n      title\n    }\n  }\n  allergies {\n    findAll {\n      allergyId\n      title\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetHomePageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findHeroes {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      createdAt\n    }\n  }\n  publicMenus {\n    findHeroes {\n      menuId\n      title\n      description\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        user {\n          firstName\n          profilePictureUrl\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n    }\n  }\n}"): (typeof documents)["query GetHomePageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicCooks {\n    findHeroes {\n      cookId\n      user {\n        userId\n        firstName\n        profilePictureUrl\n      }\n      rank\n      biography\n      location {\n        latitude\n        longitude\n      }\n      city\n      travelExpenses\n      createdAt\n    }\n  }\n  publicMenus {\n    findHeroes {\n      menuId\n      title\n      description\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        user {\n          firstName\n          profilePictureUrl\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPublicMenuPageData($menuId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicMenus {\n    findOne(menuId: $menuId) {\n      menuId\n      title\n      description\n      greetingFromKitchen\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        city\n        travelExpenses\n        maximumTravelDistance\n        user {\n          firstName\n          profilePictureUrl\n        }\n        location {\n          latitude\n          longitude\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      courses {\n        index\n        courseId\n        title\n        mealOptions {\n          index\n          meal {\n            mealId\n            title\n            description\n            type\n            imageUrl\n          }\n        }\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n    }\n  }\n  allergies {\n    findAll {\n      allergyId\n      title\n    }\n  }\n  stripePublishableKey\n}"): (typeof documents)["query GetPublicMenuPageData($menuId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicMenus {\n    findOne(menuId: $menuId) {\n      menuId\n      title\n      description\n      greetingFromKitchen\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        city\n        travelExpenses\n        maximumTravelDistance\n        user {\n          firstName\n          profilePictureUrl\n        }\n        location {\n          latitude\n          longitude\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      courses {\n        index\n        courseId\n        title\n        mealOptions {\n          index\n          meal {\n            mealId\n            title\n            description\n            type\n            imageUrl\n          }\n        }\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n    }\n  }\n  allergies {\n    findAll {\n      allergyId\n      title\n    }\n  }\n  stripePublishableKey\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPublicMenusPageData($request: FindManyPublicMenusRequest!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicMenus {\n    findMany(request: $request) {\n      menuId\n      title\n      description\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        user {\n          firstName\n          profilePictureUrl\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n      courseCount\n    }\n  }\n}"): (typeof documents)["query GetPublicMenusPageData($request: FindManyPublicMenusRequest!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n  }\n  publicMenus {\n    findMany(request: $request) {\n      menuId\n      title\n      description\n      kitchen {\n        kitchenId\n        title\n      }\n      cook {\n        cookId\n        rank\n        user {\n          firstName\n          profilePictureUrl\n        }\n      }\n      categories {\n        categoryId\n        title\n      }\n      imageUrls\n      basePrice\n      basePriceCustomers\n      pricePerAdult\n      pricePerChild\n      currencyCode\n      courseCount\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UserBookingRequestConfirmPaymentSetup($userId: String!, $bookingRequestId: String!) {\n  users {\n    bookingRequests(userId: $userId) {\n      success: confirmPaymentSetup(bookingRequestId: $bookingRequestId)\n    }\n  }\n}"): (typeof documents)["mutation UserBookingRequestConfirmPaymentSetup($userId: String!, $bookingRequestId: String!) {\n  users {\n    bookingRequests(userId: $userId) {\n      success: confirmPaymentSetup(bookingRequestId: $bookingRequestId)\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfilePersonalInformation {\n  users {\n    me {\n      userId\n      firstName\n      lastName\n      profilePictureUrl\n      birthDate\n      gender\n      acceptedTerms\n      acceptedPrivacyPolicy\n      emailAddress\n      phoneNumber\n      createdAt\n      isCook\n      isAdmin\n      addresses {\n        addressId\n        title\n        country\n        city\n        postCode\n        street\n        houseNumber\n        location {\n          latitude\n          longitude\n        }\n        createdAt\n      }\n      emailAddressUpdate {\n        emailAddress\n        createdAt\n      }\n      phoneNumberUpdate {\n        phoneNumber\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetProfilePersonalInformation {\n  users {\n    me {\n      userId\n      firstName\n      lastName\n      profilePictureUrl\n      birthDate\n      gender\n      acceptedTerms\n      acceptedPrivacyPolicy\n      emailAddress\n      phoneNumber\n      createdAt\n      isCook\n      isAdmin\n      addresses {\n        addressId\n        title\n        country\n        city\n        postCode\n        street\n        houseNumber\n        location {\n          latitude\n          longitude\n        }\n        createdAt\n      }\n      emailAddressUpdate {\n        emailAddress\n        createdAt\n      }\n      phoneNumberUpdate {\n        phoneNumber\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfileBookingsPageData($userId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    bookingRequests(userId: $userId) {\n      findMany {\n        bookingRequestId\n        globalBookingRequestId\n        adultParticipants\n        children\n        dateTime\n        status\n        userAccepted\n        cookAccepted\n        kitchenId\n        occasion\n        preparationTime\n        price {\n          amount\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        duration\n        createdAt\n        cook {\n          cookId\n          rank\n          user {\n            firstName\n            profilePictureUrl\n          }\n        }\n        configuredMenu {\n          title\n        }\n      }\n    }\n    globalBookingRequests(userId: $userId) {\n      findMany {\n        globalBookingRequestId\n        children\n        adultParticipants\n        occasion\n        message\n        dateTime\n        duration\n        priceClass {\n          type\n          min\n          max\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetProfileBookingsPageData($userId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    bookingRequests(userId: $userId) {\n      findMany {\n        bookingRequestId\n        globalBookingRequestId\n        adultParticipants\n        children\n        dateTime\n        status\n        userAccepted\n        cookAccepted\n        kitchenId\n        occasion\n        preparationTime\n        price {\n          amount\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        duration\n        createdAt\n        cook {\n          cookId\n          rank\n          user {\n            firstName\n            profilePictureUrl\n          }\n        }\n        configuredMenu {\n          title\n        }\n      }\n    }\n    globalBookingRequests(userId: $userId) {\n      findMany {\n        globalBookingRequestId\n        children\n        adultParticipants\n        occasion\n        message\n        dateTime\n        duration\n        priceClass {\n          type\n          min\n          max\n          currencyCode\n        }\n        location {\n          latitude\n          longitude\n          text\n        }\n        createdAt\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfileFavoriteCooksPageData($userId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    followings(userId: $userId) {\n      findAll {\n        cookId\n        cook {\n          user {\n            firstName\n            profilePictureUrl\n          }\n          rank\n          city\n          location {\n            text\n            longitude\n            latitude\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetProfileFavoriteCooksPageData($userId: String!) {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    followings(userId: $userId) {\n      findAll {\n        cookId\n        cook {\n          user {\n            firstName\n            profilePictureUrl\n          }\n          rank\n          city\n          location {\n            text\n            longitude\n            latitude\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfilePersonalInformationPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    me {\n      userId\n      firstName\n      lastName\n      profilePictureUrl\n      birthDate\n      gender\n      acceptedTerms\n      acceptedPrivacyPolicy\n      emailAddress\n      phoneNumber\n      createdAt\n      isCook\n      isAdmin\n      addresses {\n        addressId\n        title\n        country\n        city\n        postCode\n        street\n        houseNumber\n        location {\n          latitude\n          longitude\n        }\n        createdAt\n      }\n      emailAddressUpdate {\n        emailAddress\n        createdAt\n      }\n      phoneNumberUpdate {\n        phoneNumber\n        createdAt\n      }\n    }\n  }\n}"): (typeof documents)["query GetProfilePersonalInformationPageData {\n  users {\n    signedInUser: me {\n      ...SignedInUser\n    }\n    me {\n      userId\n      firstName\n      lastName\n      profilePictureUrl\n      birthDate\n      gender\n      acceptedTerms\n      acceptedPrivacyPolicy\n      emailAddress\n      phoneNumber\n      createdAt\n      isCook\n      isAdmin\n      addresses {\n        addressId\n        title\n        country\n        city\n        postCode\n        street\n        houseNumber\n        location {\n          latitude\n          longitude\n        }\n        createdAt\n      }\n      emailAddressUpdate {\n        emailAddress\n        createdAt\n      }\n      phoneNumberUpdate {\n        phoneNumber\n        createdAt\n      }\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;